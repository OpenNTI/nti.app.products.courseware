<!-- -*- mode: nxml -*- -->
<configure	xmlns="http://namespaces.zope.org/zope"
			xmlns:i18n="http://namespaces.zope.org/i18n"
			xmlns:ext="http://nextthought.com/ntp/ext"
			xmlns:zcml="http://namespaces.zope.org/zcml">

	<include package="zope.component" file="meta.zcml" />
	<include package="zope.security" file="meta.zcml" />
	<include package="zope.component" />

	<include package="nti.contenttypes.courses" />

	<!--
	We provide one global catalog,
	but every site that registers its own courses
	will also register its own catalog.
	Right now, these are *not* hierachacal.
	-->
	<utility factory=".catalog.CourseCatalog"
			 provides=".interfaces.ICourseCatalog" />
	<subscriber handler=".legacy_catalog._content_package_registered" />

	<!-- Auto-gen course purchasables from content -->
	<!-- This must be a global subscriber as that's where
	the library is -->
	<subscriber
		handler=".legacy_course._register_course_purchasable_from_catalog_entry" />
	<!-- This subscriber reverses the process. Could be local, global
	for symmetry -->
	<subscriber
		factory=".legacy_course._PurchaseHistoryEnrollmentStatus"
		provides="nti.app.products.courseware.interfaces.IPrincipalEnrollmentCatalog"/>
	<adapter factory=".legacy_course._LegacyCommunityBasedCourseAdministrativeLevelFactory"
			 provides="nti.contenttypes.courses.interfaces.ICourseAdministrativeLevel"/>
	<adapter factory=".legacy_course._LegacyCourseInstanceEnrollmentManager" />
	<adapter factory=".legacy_course._LegacyCourseInstanceACLProvider" />

	<adapter factory=".legacy_course._LegacyCourseInstanceEnrollments" />

	<!-- Turn catalog entries into their course instance -->
	<adapter factory=".legacy_course._course_instance_for_catalog_entry" />
	<!-- And vice versa -->
	<adapter factory=".legacy_course._legacy_course_instance_to_catalog_entry" />
	<!-- And the content packages to the course instance -->
	<adapter factory=".legacy_course._course_content_package_to_course" />
	<adapter factory=".legacy_course._content_unit_to_course" />

	<!-- Allow traversing to the 'LegacyCourses' key of communities -->
	<adapter name="LegacyCourses"
			 for="nti.dataserver.interfaces.ICommunity"
			 provides="zope.traversing.interfaces.IPathAdapter"
			 factory=".legacy_course._LegacyCommunityBasedCourseAdministrativeLevelFactory" />

	<!-- Let the course instance have activity -->
	<adapter factory=".activity._DefaultCourseActivityFactory" />
	<!-- and let it be annotatable -->
	<class class=".activity._DefaultCourseActivity">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>
	<adapter name="CourseActivity"
			 factory=".course_views.CourseActivityPathAdapter" />

	<!-- Workspaces -->
	<!-- A subscriber for enumeration -->
	<subscriber factory=".workspaces.CoursesWorkspace"
				provides=".interfaces.ICoursesWorkspace" />
	<!-- And an adapter for direct access -->
	<adapter factory=".workspaces.CoursesWorkspace"
			 provides=".interfaces.ICoursesWorkspace" />
	<adapter name="Courses"
			 factory=".catalog_views.CoursesPathAdapter" />

	<!-- A subscriber for getting admin roles -->
	<subscriber factory=".workspaces._DefaultPrincipalAdministrativeRoleCatalog"
				provides=".interfaces.IPrincipalAdministrativeRoleCatalog" />

	<!-- Traversal paths -->
	<!-- This may go away -->
	<adapter factory=".workspaces.CatalogEntryLocationInfo" />

	<adapter factory=".workspaces.CourseInstanceEnrollment"
			 provides=".interfaces.ICourseInstanceEnrollment" />
	<adapter factory=".workspaces.CourseInstanceEnrollment"
			 for="nti.contenttypes.courses.interfaces.ICourseInstance
				  nti.dataserver.interfaces.IUser"
			 provides=".interfaces.ICourseInstanceEnrollment" />

	<adapter factory=".workspaces.LegacyCourseInstanceEnrollment"
			 provides=".interfaces.ICourseInstanceEnrollment" />
	<adapter factory=".workspaces.LegacyCourseInstanceEnrollment"
			 for=".interfaces.ILegacyCommunityBasedCourseInstance
				  nti.dataserver.interfaces.IUser"
			 provides=".interfaces.ILegacyCourseInstanceEnrollment" />


	<adapter factory=".workspaces.wrapper_to_catalog"
			 for=".interfaces.ICourseInstanceEnrollment"/>
	<adapter factory=".workspaces.wrapper_to_catalog"
			 for=".interfaces.ICourseInstanceAdministrativeRole"/>

	<!--
		Application (request) specific traversal for course instances and enrollments, etc.
		Primarily, we want to bring the usual automatic-conversion to path adapters into
		play for ease of extension by other packages. (Hmm, perhaps we ought to make that
		part of the default traversal).
	-->
	<adapter factory="nti.dataserver.traversal.ContainerAdapterTraversable"
			 for="nti.contenttypes.courses.interfaces.ICourseInstance pyramid.interfaces.IRequest"
			 provides="zope.traversing.interfaces.ITraversable" />

	<adapter factory="nti.dataserver.traversal.DefaultAdapterTraversable"
			 for=".interfaces.ICourseInstanceEnrollment pyramid.interfaces.IRequest"
			 provides="zope.traversing.interfaces.ITraversable" />


	<!-- Externalization -->
	<include package="nti.externalization" file="meta.zcml" />
	<include package="nti.externalization" />

	<ext:registerAutoPackageIO
		root_interfaces=".interfaces.ICourseCatalogEntry
						 .interfaces.ICourseCatalogInstructorInfo
						 .interfaces.ICourseCreditLegacyInfo
						 .interfaces.ICourseInstanceEnrollment
						 .interfaces.ICourseInstanceAdministrativeRole
						 .interfaces.ILegacyCommunityBasedCourseInstance"
		modules=".catalog .legacy_catalog .legacy_course .workspaces" />

	<subscriber factory=".decorators._CourseInstanceLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
	<subscriber factory=".decorators._CourseOutlineContentsLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
	<subscriber factory=".course_views.CourseActivityLastViewedDecorator"
				for=".interfaces.ICourseInstanceActivity"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />

	<!-- Content Search -->
	
	<configure zcml:condition="have devmode">
		<subscriber factory=".content_search._ContentHitPredicate"
					provides="nti.contentsearch.interfaces.ISearchHitPredicate"
					for="nti.contentsearch.interfaces.IBookContent" />
		
		<subscriber factory=".content_search._VideoContentHitPredicate"
					provides="nti.contentsearch.interfaces.ISearchHitPredicate"
					for="nti.contentsearch.interfaces.IVideoTranscriptContent" />
			
		<subscriber factory=".content_search._NTICardContentHitPredicate"
					provides="nti.contentsearch.interfaces.ISearchHitPredicate"
					for="nti.contentsearch.interfaces.INTICardContent" />
	</configure>
</configure>
