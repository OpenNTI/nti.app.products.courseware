WEBVTT
Kind: captions
Language: en

00:00:00.390 --> 00:00:04.000
&gt;&gt;Dr. Deborah Trytten: Let's continue our
study of repetition and while statements by

00:00:04.000 --> 00:00:10.440
implementing a game of craps. Here's the problem
statement: write a program to play a modified

00:00:10.440 --> 00:00:16.830
version of craps. The user will roll two six-sided
dice. They lose if the sum of the digits is

00:00:16.830 --> 00:00:23.720
a 7 or 11--that's called craps. They win if
the sum of the digits is 2, 3, or 12. And

00:00:23.720 --> 00:00:30.720
they roll again if the sum of the digits is
4, 5, 6, 8, 9, or 10. The first thing we want

00:00:33.260 --> 00:00:38.120
to do is design our test data. Now this gets
a little bit tricky because of the randomness

00:00:38.120 --> 00:00:43.960
here. So it's really hard to tell if something
is really random. Because we're going to use

00:00:43.960 --> 00:00:48.579
math.random, the random number generator that's
built into Java, we're not going to worry

00:00:48.579 --> 00:00:52.969
about whether it's random or not. We're going
to assume it's doing its job. But we do want

00:00:52.969 --> 00:00:58.039
to make sure that both 1 and 6 appear because
that will help us identify an off-by-one bug,

00:00:58.039 --> 00:01:02.870
a very common problem as we've discovered.
The other thing is we want to make sure that

00:01:02.870 --> 00:01:08.479
0 and 7 don't appear. Now I think we'll notice
them if they show up. One way to do this is

00:01:08.479 --> 00:01:13.320
to make sure that all six roles appear at
least once. That's a way of checking to make

00:01:13.320 --> 00:01:16.280
sure your program is doing what it should.

00:01:16.280 --> 00:01:20.799
The other thing we want to do is to make sure
that the correct thing is done with each option.

00:01:20.799 --> 00:01:24.430
Now the only way we can be sure that we're
getting the correct thing with each option

00:01:24.430 --> 00:01:28.840
is to make sure that each option is done.
So we're going to need to keep track of which

00:01:28.840 --> 00:01:35.840
options have been done. Let me show you how
I design this into a program. So here's our

00:01:37.219 --> 00:01:43.390
craps program. I've created the shell for
it, same as usual. And what I've done is created

00:01:43.390 --> 00:01:48.350
placeholders to make sure that all six of
these roles are seen and that all of these

00:01:48.350 --> 00:01:54.729
combinations are seen. I've also put the correct
answer in them. That way I will be able to

00:01:54.729 --> 00:01:59.250
check them when we encounter them when we're
running our final program and make sure that

00:01:59.250 --> 00:02:06.250
we're getting all of our data. So to get started
as you've seen, I went to Eclipse, created

00:02:07.189 --> 00:02:10.670
a project, created a class, created a main
program.

00:02:10.670 --> 00:02:15.480
The next thing I want to do is outline the
code with comments. So we know we're going

00:02:15.480 --> 00:02:22.480
to have to repeat. So I'm going to put in
while true. Now true may or may not be what

00:02:23.890 --> 00:02:28.610
we end up with in that while loop, but this
is a way of keeping Eclipse quiet while we

00:02:28.610 --> 00:02:35.610
decide what we want to do with our while loop.
Inside the loop we're going to roll the dice.

00:02:36.400 --> 00:02:40.190
Notice this needs to be inside the loop because
we want it to be repeated, and things that

00:02:40.190 --> 00:02:47.190
are repeated are inside the loop and then
determine the fate of the role. So those are

00:02:47.450 --> 00:02:54.040
the two cases, the two things we need to implement,
and that gives us a basic structure to the

00:02:54.040 --> 00:03:01.040
program. We could even put a comment in our
while loop, roll until you win or lose the

00:03:02.930 --> 00:03:07.080
game.

00:03:07.080 --> 00:03:12.349
Now let's talk about rolling the dice. The
math.random method returns a random double

00:03:12.349 --> 00:03:19.349
between 0.0 inclusive and 1.0 exclusive. Now
these are standard computer sciencey ways

00:03:20.510 --> 00:03:26.549
of talking about these values. Let me explain
in detail what they mean. When we say 0.0

00:03:26.549 --> 00:03:33.319
is inclusive, we mean that 0.0 can actually
be returned from the random number generator.

00:03:33.319 --> 00:03:40.319
When we say 1.0 is exclusive, we mean that
anything up to .99999 can be returned, but

00:03:40.610 --> 00:03:47.319
1.0 cannot. This has important consequences
in our decisions about data. So the first

00:03:47.319 --> 00:03:52.069
thing you probably think we should do is multiply
by 6 and truncate, but let's take a look at

00:03:52.069 --> 00:03:57.360
what that will actually do. Now I've organized
this into a table, and that's a really good

00:03:57.360 --> 00:04:03.250
way to organize these computations. So what
I'm doing is looking at the boundaries, at

00:04:03.250 --> 00:04:10.250
0.0 the lowest number that can be returned
by math.random, at .5 which is the middle,

00:04:10.579 --> 00:04:15.269
and a .99999 that's the biggest number that
can be returned by math.random.

00:04:15.269 --> 00:04:22.269
If we multiply by 6, we'll get 0.0, 3.0, and
5.999. Now when we truncate that to an integer

00:04:25.750 --> 00:04:31.750
what we get is 0, 3, and 5. Now when you look
at that table you'll see those are not the

00:04:31.750 --> 00:04:37.660
outcomes we want from dice. Dice should be
between 1 and 6, so what we need to do is

00:04:37.660 --> 00:04:44.300
improve our strategy. After we truncate to
an integer, we need to add one. Creating tables

00:04:44.300 --> 00:04:49.040
like this is really a useful way to think
through these calculations before you write

00:04:49.040 --> 00:04:55.660
them down in code. In fact, you can even put
this table in your code as a comment. Now

00:04:55.660 --> 00:05:00.230
that may seem really excessive, but think
about it from the perspective of being a professional,

00:05:00.230 --> 00:05:05.330
as I know some of you will be someday. What
you want people to think when they're reading

00:05:05.330 --> 00:05:09.950
your code is, "Oh my God, this code is written
by somebody who's brilliant and did a wonderful

00:05:09.950 --> 00:05:15.020
job." Think about how detail-oriented and
how perfect they will know your code is when

00:05:15.020 --> 00:05:20.700
they see that. Now I'm not saying you always
have to do things like that in a Java 1 class,

00:05:20.700 --> 00:05:25.930
but it is important to think about the professional
persona that you eventually want to put forward

00:05:25.930 --> 00:05:29.300
as a programmer if in fact you're going to
make a living doing this.

00:05:29.300 --> 00:05:36.300
Well, we're now ready to write the code. So
for rolling our dice, we're going to take

00:05:38.880 --> 00:05:45.880
math.random, multiply by 6.0 and add 1. Remember
we also truncated. We might want to think

00:05:50.840 --> 00:05:56.410
about where our parentheses should be. Our
truncation should occur after math.random

00:05:56.410 --> 00:06:01.970
has been multiplied by 6. If we don't put
these parentheses in here, our code won't

00:06:01.970 --> 00:06:07.750
work because remember casts have very high
precedence. Well, if you truncate math.random

00:06:07.750 --> 00:06:12.910
using a cast, you'll always get 0. That is
not going to be a very interesting result.

00:06:12.910 --> 00:06:19.910
So now that we have this, we want to check
and make sure it works. So let's just print

00:06:25.160 --> 00:06:29.440
it out. Now I've got an infinite loop here,
so we're going to have to stop the program

00:06:29.440 --> 00:06:33.810
from running, and that's fine, but it is a
good way to test the data.

00:06:33.810 --> 00:06:38.220
I'm going to give us a little bit more space
because once an infinite loop gets going,

00:06:38.220 --> 00:06:45.220
it's going to go really fast. Here we go.
Okay, so what we want to make sure is that

00:06:49.320 --> 00:06:56.320
we've seen all the numbers 1 through 6. I
see a 1, a 2, a 3, a 4, a 5, and a 6. Okay,

00:06:58.600 --> 00:07:03.670
so we have all of our numbers. I'm not seeing
any 0s and 7s, so that means this is working

00:07:03.670 --> 00:07:10.670
correctly. Now remember we do want to roll
two dice, so let's put this in now. There's

00:07:12.440 --> 00:07:17.000
no reason to leave the system out print line
in the code unless you think it's something

00:07:17.000 --> 00:07:22.400
the user would want to see, and I think this
is something the user wants to see. So let's

00:07:22.400 --> 00:07:29.400
put in some comments to make it more clear.
Your first roll was, and then roll one. And

00:07:31.180 --> 00:07:38.180
then we can copy and paste this code, and
we'll create a roll two. Of course we want

00:07:46.590 --> 00:07:53.590
make sure that we change the comment to the
users your first roll was this, your second

00:07:53.680 --> 00:08:00.680
roll was this. Let's run the program again,
see what things look like now. Okay, so that's

00:08:02.870 --> 00:08:09.740
looking pretty good. Still an infinite loop,
so I had to stop it with a little red button.

00:08:09.740 --> 00:08:14.710
So let's talk a little bit about the technique
that I used to create that code. It's a really

00:08:14.710 --> 00:08:20.490
good technique to remember. It can save you
so many hours of debugging and randomly trying

00:08:20.490 --> 00:08:26.610
things. What I did was I checked the formulas
at the boundary and in the middle. Now this

00:08:26.610 --> 00:08:31.390
is not fool proof. Things can still go wrong
with formulas, but this works a tremendous

00:08:31.390 --> 00:08:37.800
number of times and is really helpful. You
can include the table in the code as comments

00:08:37.800 --> 00:08:44.050
as I mentioned, although I haven't done that.
Now the second thing we have to consider is

00:08:44.050 --> 00:08:49.080
what should our second control structure be?
When we go and read through the problem statement

00:08:49.080 --> 00:08:56.080
again, you'll say, if you get a 7 or 11 you
lose. If you get a 2, a 3, or a 12, you win.

00:08:57.980 --> 00:09:02.780
The presence of all those ifs is a hint that
it should be conditional statement. Now we've

00:09:02.780 --> 00:09:08.600
got three different things that can happen:
we can win, we can lose, or we can roll again.

00:09:08.600 --> 00:09:13.390
It's really important to think about the organization
of this if statement. So one way that you

00:09:13.390 --> 00:09:18.510
could do it is a numerical order: look at
rolling a 2 first, then a 3, then a 4, then

00:09:18.510 --> 00:09:23.240
a 5, and in fact that's a good order to do.
But you could also consider whether doing

00:09:23.240 --> 00:09:28.080
it by outcome might be a good idea. So maybe
you want to put all the winning cases together,

00:09:28.080 --> 00:09:33.900
and then all the losing cases, and then all
the roll again cases. Those are both possibilities.

00:09:33.900 --> 00:09:39.460
My preference is to do it in numerical order.
The reason is that it's easier to check and

00:09:39.460 --> 00:09:43.580
to make sure that you have all of the cases
there. When you start getting them out of

00:09:43.580 --> 00:09:48.240
order, it's a little harder to do. Now we
can copy and paste some code to get this done

00:09:48.240 --> 00:09:55.240
a little bit more efficiently. So let's go
to the code. So here we are back in Eclipse.

00:09:56.840 --> 00:10:03.840
Now we know we're going to sum our two rolls,
so I'll call that roll. Now you might think

00:10:04.870 --> 00:10:09.680
about whether you want to display that to
the user or not. You certainly could, but

00:10:09.680 --> 00:10:14.510
if you think about a craps game, it's usually
played at a table of dice and the users add

00:10:14.510 --> 00:10:20.130
the dice together themselves. So maybe this
is more like the real game. If you want to

00:10:20.130 --> 00:10:27.130
put it in, it's fine of course. So if roll
equals 2, remember 2 was a winner, so we did

00:10:29.700 --> 00:10:36.700
system out print line "you won!" with an exclamation
point to give them a little extra reward.

00:10:38.200 --> 00:10:42.870
Now let's think about how we're going to break
out of that while loop. We can't look for

00:10:42.870 --> 00:10:47.260
roll being two here, because if we do that,
we've got to put together several of them

00:10:47.260 --> 00:10:51.260
and we don't have that technique yet, so we're
going to have to learn a little different

00:10:51.260 --> 00:10:58.260
technique. What I'm going to do is user return.
The return allows you to exit the while loop

00:10:59.230 --> 00:11:03.630
because remember the return will exit the
main program. So it's kind of a clever little

00:11:03.630 --> 00:11:09.050
trick that we can use in this particular case.
Now we've got a lot of other cases to work

00:11:09.050 --> 00:11:16.050
through here, and let's move our comment up
to the right place.

00:11:23.110 --> 00:11:30.110
So let's write one example. If roll equals
3, well that's another winner, so we're going

00:11:31.600 --> 00:11:38.600
to copy this and put it in there. Now I'm
going to copy this part and paste it down.

00:11:48.450 --> 00:11:55.450
So here is 4, 5, 6, 7, 8, 9, 10, 11, 12. Lots
of cases, so let's go back and renumber them

00:12:16.779 --> 00:12:23.779
right now so there's 2, 3, 4, 5, 6, 7, 8,
9, 10, 11, and 12. Now Eclipse is going crazy

00:12:50.590 --> 00:12:55.340
with a bunch of complaints over things that
don't look wrong to me. When that happens,

00:12:55.340 --> 00:13:02.250
you want to go back up to the top and see
if something went wrong right at the top.

00:13:02.250 --> 00:13:09.250
Ah, I see what went wrong. I forgot to put
an if after my else. Well, that's unfortunate

00:13:15.290 --> 00:13:22.290
that I copied that 12 times, but let's go
and fix it. Incidentally, the best way to

00:13:26.700 --> 00:13:33.700
find mistakes in code is just by reading very,
very carefully. So don't start randomly substituting

00:13:33.740 --> 00:13:40.740
things. Stop, think, read, analyze. Those
are the skills you need to get code to behave

00:13:42.040 --> 00:13:48.480
a little bit better, and of course I should
have made sure that this was compiling before

00:13:48.480 --> 00:13:55.480
I copied it so many times. Okay, so now that
Eclipse is happy, let's go through and implement

00:13:57.230 --> 00:14:02.279
the right cases. We're supposed to win with
a 2, a, 3, or a 12. Well, right now we're

00:14:02.279 --> 00:14:09.279
winning with everything. So 4 was a roll again,
but remember we don't want to return them

00:14:11.960 --> 00:14:18.960
because we don't want to leave the loop at
that point. 5 was a roll again, and again

00:14:23.089 --> 00:14:30.089
we don't want to return. 6 was a roll again
with no return. Now 7 is a you lost, not a

00:14:42.130 --> 00:14:49.130
you won, and that one does need a return.
8 is roll again and of course without a return.

00:14:56.960 --> 00:15:03.960
9 is roll again 
without a return. 10 is roll again 
without a return. 11 is a loser, and that
one will need a return. And 12 is a winner.

00:15:29.980 --> 00:15:32.880
So looks like we've got all of our cases in
there.

00:15:32.880 --> 00:15:39.880
So now we're ready to run our program. Our
first roll was 1 and 4, so that's case four.

00:15:46.180 --> 00:15:51.380
Now I'm going to go to our test data and cross
off the cases that we've seen. So we've seen

00:15:51.380 --> 00:15:58.380
that and we've seen roles of 1 and 4. Then
we see we had a roll of 2 and 3, which is

00:15:58.670 --> 00:16:05.670
a roll of 5. So 2 and 3 are done too. Just
keeping track of what cases we've actually

00:16:07.360 --> 00:16:13.649
seen. And then we have a roll of 2 and 1.
So that's a win, that's correct, and 2 and

00:16:13.649 --> 00:16:19.260
1 we had already seen that roll on the dice.
Now all we can do is keep playing this program

00:16:19.260 --> 00:16:24.649
until we've seen all the possibilities. We
want to be especially careful to see 2 and

00:16:24.649 --> 00:16:28.890
12 because remember those are the boundary
conditions. That's the place where there are

00:16:28.890 --> 00:16:33.070
a lot of errors and a lot of problems.

00:16:33.070 --> 00:16:40.070
Okay, so our first role was a 6 and 3, and
we can see that it did roll again. That gives

00:16:43.430 --> 00:16:50.430
us our 6 also. Then we had a 2 and 4, so that's
the 6 case, and it did roll again. We had

00:16:51.010 --> 00:16:58.010
a 4 and 1. Now we've had that case before.
And a 5 from the 3 and 2, had that case before.

00:16:58.310 --> 00:17:03.940
We've got 3 and 3. We've had that case. 2
and 2, we've had that case. Ah, 2 and 6, there's

00:17:03.940 --> 00:17:10.940
something new. 2 and 6 is case 8, and it's
still rolling. And then 4 and 2 is case 6.

00:17:16.110 --> 00:17:23.110
Here we have 5 and 2, and we lost. By the
way, that's also our 5. So we don't need to

00:17:23.900 --> 00:17:28.870
look for the individual dice anymore. We haven't
seen any illegal dice. We're seeing all the

00:17:28.870 --> 00:17:34.220
values. That looks like it's working well.
Now we notice the cases we haven't seen. Our

00:17:34.220 --> 00:17:39.309
2, 10, 11, and 12. If you know anything about
probability and statistics, you'll probably

00:17:39.309 --> 00:17:44.280
recognize that those are some of the least
frequent rolls, so it's not surprising that

00:17:44.280 --> 00:17:51.280
we're having trouble getting those. Running
the program again. So 1 and 4 again. There's

00:17:53.850 --> 00:17:59.020
a 10, there's one of the cases we were looking
for, and it did roll again. Then we have a

00:17:59.020 --> 00:18:06.020
3 and 1. Rolling again. 6 and 1, we lost right
away. 1 and 2, we won right away. 3 and 5,

00:18:13.170 --> 00:18:19.970
1 and 2. 5 and 5, 3 and 6, 5 and 2.

00:18:19.970 --> 00:18:25.179
All we can do is play this program over and
over until we've seen all the cases. So we've

00:18:25.179 --> 00:18:32.179
now seen our 1 and 1 win, but we haven't seen
11 or 12. So there's an 11. And not surprisingly,

00:18:39.340 --> 00:18:46.340
one of the least common ones is 12. Didn't
get it that time. Didn't get it that time,

00:18:51.800 --> 00:18:58.800
didn't get it that time, or that time, or
that time, or that time. Because 12 was a

00:19:02.429 --> 00:19:09.429
win, we know we only need to check the last
one. Now I'm not going to give up on this

00:19:12.170 --> 00:19:19.170
until I've seen that 12. The probability of
a 12 is relatively small, and there we go.

00:19:20.450 --> 00:19:27.450
We finally got it. The reason that it's important
not to give up is remember that these boundary

00:19:27.860 --> 00:19:33.370
off-by-one conditions are exactly the kind
of errors that occur in programs. So you really

00:19:33.370 --> 00:19:37.370
don't want to give up on those even if you
have to run the program several times as we

00:19:37.370 --> 00:19:44.370
did. To recap the program, first we took repeated
turns using a loop, a while loop. We had two

00:19:46.890 --> 00:19:51.410
quitting conditions, winning and losing, and
those presented a problem with our current

00:19:51.410 --> 00:19:56.270
knowledge, and so what we had to do was return
out of the loop to get past it. So it's a

00:19:56.270 --> 00:20:01.330
very strange idea to make an infinite loop
on purpose in a program and then exit the

00:20:01.330 --> 00:20:07.250
program when necessary, but it did work in
this case. So keep programming!

