WEBVTT
Kind: captions
Language: en

00:00:01.010 --> 00:00:05.420
&gt;&gt;Arrays are naturally processed with loops,
but while loops that we've used so far were

00:00:05.420 --> 00:00:09.260
a good place to start our study of loops.
But there are other kinds of loops that are

00:00:09.260 --> 00:00:14.860
particularly convenient for Arrays. My favorite
loop is called a for loop. The for loop displayed

00:00:14.860 --> 00:00:20.560
will set all five elements in the array data
to 10. Int square brackets data equals new

00:00:20.560 --> 00:00:27.560
int of 5 for int index equals zero index less
than data.length plus plus index data of index

00:00:29.760 --> 00:00:35.949
equals 10. The syntax for a for loop is not
as obvious as a while loop. The for loop has

00:00:35.949 --> 00:00:42.949
three areas between parentheses separated
by semicolons. The leftmost area is an initialization.

00:00:43.469 --> 00:00:48.479
This is done just once at the start of the
loop. In the loop you're looking at int index

00:00:48.479 --> 00:00:53.920
equal zero is the initialization. The variable
index is declared just for this loop, and

00:00:53.920 --> 00:00:59.369
cannot be used outside of this one loop. The
middle area is the test condition. This is

00:00:59.369 --> 00:01:03.809
the same as the Boolean test condition in
a while loop. Just like a while loop, the

00:01:03.809 --> 00:01:08.430
test occurs before the loop body is done.
This means that it's possible to never enter

00:01:08.430 --> 00:01:14.470
a for loop. This is where for loops get trickier.
The rightmost area is done after the loop

00:01:14.470 --> 00:01:20.250
body is executed but before the test for the
second trip through the loop. I think of this

00:01:20.250 --> 00:01:24.490
as coming into the loop from the left side
the first time and the right side all the

00:01:24.490 --> 00:01:29.590
other times. You can see the potential for
repetition in the flowchart, by noticing that

00:01:29.590 --> 00:01:36.080
the flow of control can circle between the
test, the loop body, and the increment. Now

00:01:36.080 --> 00:01:40.290
that you know two different loops you may
wonder how you choose between them. I almost

00:01:40.290 --> 00:01:44.409
always write for loops. I like them because
I don't forget the increment like I sometimes

00:01:44.409 --> 00:01:49.860
do when I write while loops. As a general
rule, as you become a more experienced programmer

00:01:49.860 --> 00:01:54.820
you'll probably write more for loops and fewer
while loops but rest assured that every possible

00:01:54.820 --> 00:02:00.050
loop can be done either way, although sometimes
one loop is prettier than the other. I don't

00:02:00.050 --> 00:02:04.460
care which one you use most of the time, but
you will have to be able to read both of them

00:02:04.460 --> 00:02:10.129
to understand other people's code. So mix
it up a bit when you're practicing programming.

00:02:10.129 --> 00:02:13.870
Now that we have another loop, let's think
about how we can solve an important problem

00:02:13.870 --> 00:02:19.139
involving loops--sorting data. Sorting data
is important because when our data has a better

00:02:19.139 --> 00:02:24.709
organization we can be more strategic in our
processing. Think about an old-fashioned phone

00:02:24.709 --> 00:02:29.769
book as an example. If the names weren't put
in sorted order it would be virtually impossible

00:02:29.769 --> 00:02:34.670
to find anyone's phone number. We've seen
that binary search can be much more efficient

00:02:34.670 --> 00:02:40.359
than linear search, because it can take advantage
of sorted data. But how does data get sorted

00:02:40.359 --> 00:02:47.359
exactly? Well, computer scientists spent decades
discovering amazing new sorting algorithms.

00:02:47.540 --> 00:02:52.469
The first one we're going to study is called
selection sort. The idea is to select the

00:02:52.469 --> 00:02:57.200
smallest element and swap it into the first
position of the array. You then select the

00:02:57.200 --> 00:03:02.639
second smallest element and swap it into the
second element of the array, and so on. Consider

00:03:02.639 --> 00:03:09.639
this example our array initially contains
4, 7, 1, 3, 5. We'll step through the array

00:03:10.239 --> 00:03:15.249
one position at a time, finding the smallest
number. Initially 4 is the smallest number

00:03:15.249 --> 00:03:21.279
at index zero. Since 4 is smaller than 7 at
index one, the index with the smallest number

00:03:21.279 --> 00:03:28.279
is still 0. One is smaller than 4. So now
the index of the smallest number is 2. The

00:03:28.419 --> 00:03:33.359
index of the smallest number remains 2 throughout
the rest the loop, because 1 is smaller than

00:03:33.359 --> 00:03:39.980
3 and 5. We now stop the data at indices 0
and 2 because we know the value at index 2

00:03:39.980 --> 00:03:46.980
is the smallest. Our array now contains 1,
7, 4, 3, 5. If you think about how we would

00:03:48.379 --> 00:03:55.379
code this idea, you can see that it's the
loop below. Int minIndex equals zero for int

00:03:55.919 --> 00:04:02.919
i equals 1, i less than data.length plus plus
i if data of min data is less than data of

00:04:03.879 --> 00:04:10.879
I minIndex equals i. Now we're going to swap
data zero and data minIndex. Int temp equals

00:04:12.419 --> 00:04:19.419
data of zero, data of zero is data of minIndex,
data of minIndex equals temp. That loop is

00:04:20.440 --> 00:04:25.760
little tricky. Notice that I initialized the
minimum index to be zero, and then started

00:04:25.760 --> 00:04:31.600
processing when i was one. There is no reason
to start at zero in this case, since it is

00:04:31.600 --> 00:04:36.510
the index of the smallest value so far already.
This means that our loop doesn't follow the

00:04:36.510 --> 00:04:42.150
usual pattern of starting at zero and ending
at less than the array length. Now comes the

00:04:42.150 --> 00:04:47.600
tricky part. We've put the smallest value
in the first position. How do we get the rest

00:04:47.600 --> 00:04:52.230
of the values in the right position? Now we
could write another loop after the original

00:04:52.230 --> 00:04:58.530
loop to get the second value in the proper
position. It would look like this: int minIndex

00:04:58.530 --> 00:05:05.530
equals 1, for int i equals 2, i less than
data.length plus plus i, if data of minIndex

00:05:07.510 --> 00:05:14.510
is less than data of i minIndex equals i and
then we would swap the data again. The problem

00:05:15.040 --> 00:05:19.920
with this strategy is that the number of loops
would depend on the length of the array. Since

00:05:19.920 --> 00:05:25.980
Arrays can be lots of different lengths we
need to be more clever. We need to loop our

00:05:25.980 --> 00:05:31.670
loops. This is another example of nesting
control structures. We've already nested if

00:05:31.670 --> 00:05:38.140
statements, loops, and methods, so we shouldn't
be surprised that loops can nest with themselves.

00:05:38.140 --> 00:05:45.140
For int start equals zero, start less than
data length minus one, plus plus start int

00:05:45.560 --> 00:05:52.560
minIndex equals start for int i equals start
plus one, i less than data.length plus plus

00:05:54.110 --> 00:06:01.110
i if data of minIndex is less than data of
i, minIndex equals i. Now we're going to swap

00:06:02.310 --> 00:06:09.310
our data. The inner loop is the one we wrote
first, but with zero replaced by the variable

00:06:12.300 --> 00:06:18.500
start. The outer loop uses the variable start
to keep track of how our starting position

00:06:18.500 --> 00:06:25.140
marches across the array one position at a
time as we swap the smallest values into position.

00:06:25.140 --> 00:06:30.720
The inter-loop will be executed in its entirety
for each trip through the outer loop. The

00:06:30.720 --> 00:06:36.460
pattern of access to the array looks like
this: the first iteration accesses all five

00:06:36.460 --> 00:06:41.860
elements of the array. The second iteration
doesn't need to access the leftmost element.

00:06:41.860 --> 00:06:46.400
We know that the leftmost element is the smallest
element already, so it can't be the second

00:06:46.400 --> 00:06:51.520
smallest element. Similarly, we don't need
to access the first two elements on the third

00:06:51.520 --> 00:06:57.310
trip through the array. This triangular pattern
is typical of computations that use nested

00:06:57.310 --> 00:07:03.120
loops, and is one of the ways to identify
when you'll need to use a nested loop in programming.

00:07:03.120 --> 00:07:07.900
Notice that our last trip through the array
accesses two elements, not one. Once we've

00:07:07.900 --> 00:07:12.700
determined that the next to the last element
is the second largest, the last element has

00:07:12.700 --> 00:07:17.280
to be the largest. You can see this in the
algorithm by noticing that the outer loop

00:07:17.280 --> 00:07:24.000
stops at the array length minus two, not minus
one as usual. We'll look at other algorithms

00:07:24.000 --> 00:07:27.009
for sorting data so you can see the other
nested loops in action.

