WEBVTT
Kind: captions
Language: en

00:00:00.930 --> 00:00:05.339
At this point we can write programs that store
and manipulate single numbers and words. These

00:00:05.339 --> 00:00:10.090
programs are run by stepping through the main
program one instruction at a time. That's

00:00:10.090 --> 00:00:15.240
okay, but there's some limitations. We don't
yet have the power to sometimes do one thing

00:00:15.240 --> 00:00:21.220
and other times do something else. And while
we have the power to do things that are repetitive,

00:00:21.220 --> 00:00:26.430
the code would be very, very long, and ultimately
that becomes hard to read. So we need to learn

00:00:26.430 --> 00:00:30.830
some more sophisticated control structures.
In order to do that, you need to discover

00:00:30.830 --> 00:00:36.560
a new type of data. This data is called Boolean
data, and it's sort of interesting because

00:00:36.560 --> 00:00:41.820
it has only two values. One is true and the
other false. Notice that there are no quotes

00:00:41.820 --> 00:00:47.680
around true and false. These aren't strings,
it's a different data type. Boolean data is

00:00:47.680 --> 00:00:53.180
created mostly by operators like greater than
or less than, greater than or equal to, equal,

00:00:53.180 --> 00:00:58.430
and not equal. Now, equal is a little bit
different in Java than it is in math. It's

00:00:58.430 --> 00:01:03.780
two equal signs put together. And not equal
is an exclamation point followed by an equal

00:01:03.780 --> 00:01:10.780
sign. So, for example, 2 less than 3 has the
value true because 2, in fact, is less than

00:01:10.860 --> 00:01:17.860
3. 5 equals equals 10 is false because 5 and
10 are not the same value. 5 exclamation point

00:01:18.130 --> 00:01:24.270
equals 10, however, is true because 5 and
10 aren't the same.

00:01:24.270 --> 00:01:27.960
Conditional statements are what allows Java
to sometimes do one thing and sometimes do

00:01:27.960 --> 00:01:32.320
something else. Suppose we have an integer
variable that stores the number of tweets

00:01:32.320 --> 00:01:37.979
that somebody has posted, cleverly called
tweets. We could write out that value by saying

00:01:37.979 --> 00:01:44.619
you have plus tweets plus and then tweets
with double quotes where you need them. That

00:01:44.619 --> 00:01:49.310
isn't really right, or at least it isn't beautiful
because what it should say is: you have one

00:01:49.310 --> 00:01:54.930
tweet, without an 's,' or you have 10 tweets
with an 's.' We need to be able to sometimes

00:01:54.930 --> 00:02:00.740
do one thing and sometimes do something else.
The code that does this looks like this below.

00:02:00.740 --> 00:02:06.290
If tweets equals equals one (notice two equal
signs, not one) system out print line, you

00:02:06.290 --> 00:02:13.290
have one plus tweets plus tweet. Else system
out print line you have plus tweets plus tweets

00:02:17.510 --> 00:02:23.419
with an 's' in it. The syntax for this is
very simple. The keyword is 'if,' then there's

00:02:23.419 --> 00:02:28.499
a Boolean condition, and there's an action
that's taken if the condition is true. The

00:02:28.499 --> 00:02:33.249
else is optional, as are the curly braces
if you have only one thing in the statement

00:02:33.249 --> 00:02:37.499
like we do in this case. But to tell you the
truth, I put the curly braces in most of the

00:02:37.499 --> 00:02:41.249
time because I think it makes the code easier
to read.

00:02:41.249 --> 00:02:46.230
Let's look at another example. Let's let a
user reenter the number of items they purchased

00:02:46.230 --> 00:02:51.669
if they select a negative number. To do this
we'll create a scanner, scanner input is new

00:02:51.669 --> 00:02:58.669
scanner system in. Then we'll create a variable
to store the number they purchased, int purchase.

00:02:59.379 --> 00:03:04.769
We'll say purchase is input dot next int to
let the user enter the number they've purchased.

00:03:04.769 --> 00:03:10.469
If purchase is less than zero, we'll do system
out print line, please enter a positive number,

00:03:10.469 --> 00:03:15.989
and then purchase equals input dot next int.
Notice this time the curly braces aren't optional

00:03:15.989 --> 00:03:21.449
because we have two things that we want to
do when the statement is true, not just one.

00:03:21.449 --> 00:03:26.269
There's a problem though. Users can make more
than one mistake. This code successfully corrects

00:03:26.269 --> 00:03:31.169
one mistake, but then lets the second one
slip by. This could be tragic for a for a

00:03:31.169 --> 00:03:36.049
vendor because if a negative order is recorded,
it might result in a refund. Definitely not

00:03:36.049 --> 00:03:40.260
what you want to be doing. And even if you
catch this problem later, you're still not

00:03:40.260 --> 00:03:45.239
helping the customer order correctly, which
is very important. There's a saying in programming

00:03:45.239 --> 00:03:49.599
that it's hard to make things foolproof because
fools are so clever. To fix this we need to

00:03:49.599 --> 00:03:52.249
know how to do things more than once.

00:03:52.249 --> 00:03:57.299
Repetition uses a Boolean condition, just
like else does. The code looks like this:

00:03:57.299 --> 00:04:04.299
while, and then the Boolean condition in parentheses,
and then curly braces that surround some actions.

00:04:04.369 --> 00:04:09.189
Just like if, the curly braces are unnecessary
if there's only one statement. But with while

00:04:09.189 --> 00:04:13.279
loops, there's almost never only one statement.
So just get used to putting the curly braces

00:04:13.279 --> 00:04:19.019
in. Here's the while loop that solves our
problem: scanner input is new scanner system

00:04:19.019 --> 00:04:25.080
in. Then we need to create a variable to store
our purchase, int purchase. We need to get

00:04:25.080 --> 00:04:30.729
the number of purchases from the user purchase
equals input dot next int. And now we need

00:04:30.729 --> 00:04:37.169
a loop that will allow them to enter it repeatedly.
So, while purchase is less than zero, system

00:04:37.169 --> 00:04:43.840
out print line please enter a positive number,
and then, purchase equals input dot next int.

00:04:43.840 --> 00:04:48.379
This loop will run as many times as the user
makes mistakes, so we know when the loop is

00:04:48.379 --> 00:04:53.449
finished, they've made a positive order. In
summary, both if statements and while loops

00:04:53.449 --> 00:04:58.490
change the order in which program statements
are executed. This is called flow of control

00:04:58.490 --> 00:05:03.520
in programming. Learning to use these statements
strategically will make our programs shorter,

00:05:03.520 --> 00:05:05.389
prettier, easier to read, and more powerful.

