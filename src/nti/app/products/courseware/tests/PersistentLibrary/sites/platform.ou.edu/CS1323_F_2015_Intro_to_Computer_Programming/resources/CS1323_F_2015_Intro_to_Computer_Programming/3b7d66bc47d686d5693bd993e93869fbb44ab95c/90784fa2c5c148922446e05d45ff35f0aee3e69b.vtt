WEBVTT
Kind: captions
Language: en

00:00:01.120 --> 00:00:07.290
We're going to finish our study of primitive
data types with an e-commerce purchase. Let's

00:00:07.290 --> 00:00:13.120
write a program to calculate the cost of a
purchase for an online sale at Glamazon.com.

00:00:13.120 --> 00:00:19.390
They're going to sell three items: mascara
at 8.99, lipstick at 3.99, and eye shadow

00:00:19.390 --> 00:00:26.390
at 6.89. Taxes are 6.5%, and they're applied
before shipping, and shipping costs 8 dollars.

00:00:28.670 --> 00:00:32.930
So the first thing we need to do is to start
Eclipse. You want to create a workspace for

00:00:32.930 --> 00:00:38.219
the class if you haven't already. Make sure
that you know where it is. So you could put

00:00:38.219 --> 00:00:42.980
it in a home directory. You could put it on
your desktop. It really doesn't matter where

00:00:42.980 --> 00:00:49.600
it is so much as that you can find it. So
the first thing we want to do is to start

00:00:49.600 --> 00:00:56.600
Eclipse. When Eclipse starts, it'll have a
default workspace. Make sure you know where

00:00:58.999 --> 00:01:05.999
the workspace is. So here's what Eclipse looks
like what it starts. The next thing we want

00:01:12.080 --> 00:01:19.080
to do is to create a project. Make sure you
give your project a meaningful name. To create

00:01:19.110 --> 00:01:26.110
a project you go to the File Menu, and choose
New Java Project. Now project names aren't

00:01:27.190 --> 00:01:34.190
very fussy. So I'm going to call my project
Glamazon.com. We wouldn't be able to use that

00:01:35.580 --> 00:01:42.580
as a class name because it has a period in
it, and that's not legal in a class name.

00:01:43.450 --> 00:01:49.540
We now have our project over here. I'm highlighting
it and choosing the source directory. The

00:01:49.540 --> 00:01:55.340
source directory is where the Java Files get
saved.

00:01:55.340 --> 00:01:59.460
The next thing we need to do is to create
a class. All of the Java programs are in a

00:01:59.460 --> 00:02:05.170
class. Class names start with capital letters
and have no spaces and punctuation. The body

00:02:05.170 --> 00:02:10.340
of the class is in curly braces. The problem
statement from the PowerPoint is a great comment

00:02:10.340 --> 00:02:17.340
to start the class. So I'll grab that on my
way in so that we have it. So I'm copying

00:02:21.239 --> 00:02:28.239
the problem statement, creating a new class.
There are two different ways you can do this.

00:02:30.730 --> 00:02:37.730
One is to go to the File menu and choose New
Class. The other way, and the way you'll probably

00:02:38.819 --> 00:02:43.150
use the most is right here with the little
green target with the yellow plus sign on

00:02:43.150 --> 00:02:50.150
it. I'm calling the class Glamazon. Notice
the capital G because it's a class name, and

00:02:56.120 --> 00:03:02.170
notice I didn't put dot com because you can't
put a period in a class name. As far as the

00:03:02.170 --> 00:03:07.209
boxes to check, this is the correct superclass.
We won't know what that means for a while,

00:03:07.209 --> 00:03:08.859
so don't worry about it.

00:03:08.859 --> 00:03:13.620
And we're going to want to have a main program
created. It's okay to have Eclipse create

00:03:13.620 --> 00:03:17.629
your main programs for you, but remember that
when you're doing tests, you're going to need

00:03:17.629 --> 00:03:22.370
to know what those things are. So you might
want to write a few of them yourself. In fact,

00:03:22.370 --> 00:03:29.370
why don't I set a good example and write it
this time. So Eclipse will create a class.

00:03:30.370 --> 00:03:34.579
Now I don't like the way it really creates
it very well because it does curly braces

00:03:34.579 --> 00:03:38.719
a different way than I like to do them. I
like to have my curly braces line up on the

00:03:38.719 --> 00:03:45.719
left. I find that keeps the code neater and
prevents mistakes. Now I'm going to put a

00:03:46.439 --> 00:03:53.439
comment in that has the data that we captured
from the original PowerPoint. Comments start

00:03:57.299 --> 00:04:02.939
with a slash asterisk and they end with an
asterisk slash. We'll do more structured comments

00:04:02.939 --> 00:04:07.999
later on. For right now I'm going to clean
this up a little bit to make sure that we

00:04:07.999 --> 00:04:12.760
can see exactly what it looks like, kind of
liked the way that little asterisk looks,

00:04:12.760 --> 00:04:18.449
so let's put those in on every line. It's
extremely important to keep your code neat

00:04:18.449 --> 00:04:22.560
and well-organized, so you'll notice when
I'm writing code, I've spent a lot of time

00:04:22.560 --> 00:04:29.360
fussing with little things. I know it looks
silly, but it makes a big difference in how

00:04:29.360 --> 00:04:34.970
easy it is to work with code in the long run.
So lining up those little asterisks makes

00:04:34.970 --> 00:04:41.449
it a little prettier, and now we have a good
place to start our program.

00:04:41.449 --> 00:04:45.400
The next thing we need to do is create the
main program. The main program is inside of

00:04:45.400 --> 00:04:52.229
the class. Remember the signature for it is
public static void main open parenthesis string

00:04:52.229 --> 00:04:57.990
square bracket args close parenthesis. The
body is also contained in curly braces, and

00:04:57.990 --> 00:05:04.990
we indent it to show the structure properly.
So here I am inside the class. I indented

00:05:06.690 --> 00:05:13.690
public static void main string square brackets—whoops,
one key off—args, and here are the curly

00:05:18.060 --> 00:05:22.780
braces. Now you'll notice that Eclipse has
a tendency to go nuts while you're doing these

00:05:22.780 --> 00:05:28.759
things and puts up all sorts of little red
boxes. Just ignore them. It's trying to compile

00:05:28.759 --> 00:05:34.050
your code before you finished writing it,
which is one of Eclipse's bad habits, so don't

00:05:34.050 --> 00:05:38.240
worry about them until after the lines are
done. You'll notice we don't have any problems

00:05:38.240 --> 00:05:43.370
right now, and you see this in Eclipse because
there's no little red x's hanging around over

00:05:43.370 --> 00:05:48.770
here, and over here nothing is in the red.
So those little red x's and boxes are ways

00:05:48.770 --> 00:05:53.120
that Eclipse tells you that you're making
mistakes.

00:05:53.120 --> 00:05:57.530
The next thing we need to do is outline the
main program. Now some people when they get

00:05:57.530 --> 00:06:02.110
in a program get really excited to write code,
and so they forget to think about what they're

00:06:02.110 --> 00:06:07.139
doing first. That turns out to be a big mistake,
so what we're going to do is create comments

00:06:07.139 --> 00:06:11.430
that describe what the main program is going
to do. Now all of our programs are going to

00:06:11.430 --> 00:06:14.939
have the same structure, at least for a little
while. We're going to get some input from

00:06:14.939 --> 00:06:20.370
the user, do some calculations, and then show
the user some output. So that's what our comments

00:06:20.370 --> 00:06:27.370
will basically say. Here's our first comment.
Now I could just say get input from user,

00:06:27.520 --> 00:06:34.520
but let's try to be a little bit more specific
than that. Get the number of mascara, lipstick,

00:06:37.360 --> 00:06:44.360
and eye shadows that are purchased. Notice
that when I was getting ready to go off the

00:06:45.780 --> 00:06:50.610
screen that I created a new line. You really
do not want to have code that's hanging off

00:06:50.610 --> 00:06:55.860
the screen because it's hard to debug code
that you can't see. So that's the first thing

00:06:55.860 --> 00:06:57.509
we're going to do.

00:06:57.509 --> 00:07:04.509
Then we're going to calculate the price of
the full purchase, and the last thing we're

00:07:06.509 --> 00:07:13.509
going to do is show the receipt to the consumer.
Now notice none of this code actually runs

00:07:15.210 --> 00:07:19.400
yet, but it does help us get structure, and
it helps us break down the problem a little

00:07:19.400 --> 00:07:23.300
bit. One of the problems with programming
is it feels like there's so much that you

00:07:23.300 --> 00:07:27.530
need to do, and you really do want to start
a little bit at a time instead of getting

00:07:27.530 --> 00:07:33.250
overwhelmed by that. So this is a way of breaking
it down. This actually has a name in computer

00:07:33.250 --> 00:07:37.770
science. It's called subsequent subdivision.
I know it's a big word, but it's a way to

00:07:37.770 --> 00:07:40.659
think about it.

00:07:40.659 --> 00:07:45.499
The next thing we need to do is to make decisions
about our data. We need to select identifiers

00:07:45.499 --> 00:07:49.919
and types for data. So we know we're going
to need to have the number of each of three

00:07:49.919 --> 00:07:55.020
items ordered. Now all of these items are
things that are countable. You could order

00:07:55.020 --> 00:08:01.060
one mascara or two mascaras or three, but
you can't order 2.5 of them. So that tells

00:08:01.060 --> 00:08:07.090
us what the type should be. It should definitely
be an int. And there should be a cost for

00:08:07.090 --> 00:08:12.770
each item. Now this one turns out to be a
little bit trickier. The cost could be a double

00:08:12.770 --> 00:08:17.759
or could be an int, depending on whether we're
storing the cost in pennies or dollars. It

00:08:17.759 --> 00:08:22.240
doesn't really matter which one you choose,
as long as your pay attention to which one

00:08:22.240 --> 00:08:27.319
you're using and make sure you document it
correctly, so you know which one you're using.

00:08:27.319 --> 00:08:32.960
So let's create it in double. That means we'll
be storing things in dollars. We also need

00:08:32.960 --> 00:08:37.209
the name of each item. The names of items
are created of characters, and so those should

00:08:37.209 --> 00:08:43.849
be stored in a string. The tax rate, on the
other hand, has a decimal point in it, so

00:08:43.849 --> 00:08:49.380
that should be a double. And the shipping
cost--now this one's a little bit tricky because

00:08:49.380 --> 00:08:54.610
our current shipping cost is eight dollars,
so it might be tempting to think, "Oh, that

00:08:54.610 --> 00:08:58.610
doesn't have a decimal point in it, and so
we should make it an int." But if you know

00:08:58.610 --> 00:09:02.910
anything about online retailers, you know
that they're going to be changing their costs,

00:09:02.910 --> 00:09:09.250
so tomorrow shipping may be 7.99 or 9.99 or
3.99. So you want to make it a double so that

00:09:09.250 --> 00:09:13.750
the program can be changed if it needs to
be later.

00:09:13.750 --> 00:09:17.930
The other thing we're going to need to keep
track of is the total cost. That's money,

00:09:17.930 --> 00:09:23.170
so that's going to be a double too. So now
we have a whole bunch of decisions made about

00:09:23.170 --> 00:09:27.370
data that we're ready to transfer to the program.

00:09:27.370 --> 00:09:34.370
So let's write some code. I'm going to do
one item first, so let's do our mascara. We

00:09:42.820 --> 00:09:49.820
decided that the number of mascara needed
to be an int. We decided the name of mascara

00:09:53.329 --> 00:10:00.329
needed to be a string. The price of mascara
needed to be a double. Our total price needed

00:10:10.149 --> 00:10:16.910
to be a double, so let's start our total price
at zero because we haven't purchased anything

00:10:16.910 --> 00:10:22.420
yet. Now I could put the number of lipsticks,
and eye shadows, and the names, and all those

00:10:22.420 --> 00:10:27.329
in at this point, but let's wait instead and
work with a little bit of code before it gets

00:10:27.329 --> 00:10:34.329
too overwhelming. We also needed variables
for our tax rate. You'll notice that when

00:10:40.920 --> 00:10:47.920
I'm creating these constants like 0.065 that
I always put a zero before the decimal point.

00:10:47.970 --> 00:10:51.940
That's a habit. It doesn't have to be done
that way. The computer will understand it

00:10:51.940 --> 00:10:56.440
fine without the zero, but it is a way of
communicating to other people who are reading

00:10:56.440 --> 00:11:01.829
the program that this is a double instead
of an int. Little things like dots are easy

00:11:01.829 --> 00:11:07.779
to miss in code, so you're always trying to
make the code easier to read. The other thing

00:11:07.779 --> 00:11:14.779
we needed was our shipping cost. Once again,
I could've said just eight, and the program

00:11:18.529 --> 00:11:25.360
would've worked fine, but because I made it
a double, I put 8.00 in it. Now notice I've

00:11:25.360 --> 00:11:30.880
missed a space there, and I missed another
space up above. I'm going to go back and fix

00:11:30.880 --> 00:11:35.260
those things, so that my code really looks
nice.

00:11:35.260 --> 00:11:41.100
Okay, so we're going to continue with our
strategy to work with one item first, and

00:11:41.100 --> 00:11:48.000
then we can copy and paste code. The other
thing we want to do while we're in our code

00:11:48.000 --> 00:11:52.610
is to create the input. Now this is going
to use a scanner object. Remember we need

00:11:52.610 --> 00:11:56.190
to prompt the user because they don't know
what we're thinking, so let's go and write

00:11:56.190 --> 00:12:01.560
that code too. So that code should go right
here where it says calculate the price of

00:12:01.560 --> 00:12:08.560
the full purchase. So we're going to prompt
our user, system out print line how many,

00:12:15.769 --> 00:12:21.350
and then mascara--remember mascara is a string
variable, so we need to use pluses to tell

00:12:21.350 --> 00:12:28.350
it to concatenate with how many--do you wish
to purchase. Now the next thing we need to

00:12:33.029 --> 00:12:38.839
do is to get input. I like to leave my scanner
objects up at the top of the class because

00:12:38.839 --> 00:12:45.839
they get used a lot. So scanner input is new
scanner dot system dot in. Now notice that

00:12:50.980 --> 00:12:56.209
that's underlined in red right now. The reason
that Eclipses isn't happy with that is because

00:12:56.209 --> 00:13:00.550
it doesn't know where to find the scanner
class. The scanner class is not part of Java

00:13:00.550 --> 00:13:06.680
dot Lang where a lot of other classes are.
So we have to give Eclipse instructions. We

00:13:06.680 --> 00:13:13.680
do that up here by telling Eclipse to import
Java dot util dot scanner, and notice Eclipse

00:13:16.949 --> 00:13:19.290
is happy again.

00:13:19.290 --> 00:13:26.290
So let's go down now and get the number of
mascara from the user. So number mascara equals

00:13:32.490 --> 00:13:39.389
input dot next int. Now the reason I used
next int instead of next double is the number

00:13:39.389 --> 00:13:46.389
of mascara is an int. Now we could run our
program at this point, but we really wouldn't

00:13:47.560 --> 00:13:54.560
know if we had been successful. So one thing
we might want to do is to do just a little

00:13:54.610 --> 00:14:01.610
bit of output to check. We have more sophisticated
ways to debug, and we'll use those later,

00:14:03.269 --> 00:14:07.720
but for right now the important thing is to
make sure that our input is coming in correctly.

00:14:07.720 --> 00:14:12.170
I know it looks like I'm being very cautious,
and I am, but this actually saves time and

00:14:12.170 --> 00:14:14.899
programming to be cautious.

00:14:14.899 --> 00:14:21.899
Now we're ready to run the program. That's
this green arrow button up here. How many

00:14:25.300 --> 00:14:32.300
mascara do you wish to purchase? Let's get
one. We saw one as output. Let me raise my

00:14:32.620 --> 00:14:37.550
console window up so you can see all of that.
So the green one was the character I input,

00:14:37.550 --> 00:14:42.100
and the one was the echoing it. We can see
that that was done correctly. The other thing

00:14:42.100 --> 00:14:46.519
that I noticed is that I have a question here,
and I didn't put a question mark on it. That

00:14:46.519 --> 00:14:53.259
looks a little bit odd, so let's fix that
in our code too. Now one of the things that

00:14:53.259 --> 00:14:58.350
happened when we did that--you may notice
my code is starting to shift back and forth.

00:14:58.350 --> 00:15:02.519
That's because this line has gotten a little
bit too long, so let's break that line into

00:15:02.519 --> 00:15:07.959
two pieces.

00:15:07.959 --> 00:15:12.029
The next thing we want to do is do some output.
Now we did a little bit of output to check

00:15:12.029 --> 00:15:16.870
that our input was correct, but I'm talking
now about the final output from the program.

00:15:16.870 --> 00:15:22.819
So let's write some code. Now if I was the
user, what I would want to see here is not

00:15:22.819 --> 00:15:27.940
just how much money I owe, but I'd like to
see my purchases echoed to make sure that

00:15:27.940 --> 00:15:34.940
everything is being done correctly. Let's
show the receipt to the customer. Now we haven't

00:15:35.850 --> 00:15:42.850
done most of our calculations, so we are just
going to show the number that were ordered,

00:15:47.350 --> 00:15:54.350
so that will be number mascara—whoops, and
I was about to type in mascara and then I

00:15:57.069 --> 00:16:02.430
remembered that we have a variable for that.
There's going to be something that goes wrong

00:16:02.430 --> 00:16:07.740
here if we continue on this path. Once we
type in number of mascara, remember that's

00:16:07.740 --> 00:16:13.009
an integer, and mascara is a string that doesn't
have a space in front of it. So if we type

00:16:13.009 --> 00:16:18.000
those in the way they are right now, what
we'll see is the number one will be right

00:16:18.000 --> 00:16:25.000
in front of the word mascara, and that won't
look pretty. So let's put in an extra space

00:16:25.110 --> 00:16:32.110
now. The other thing we might like to put
in is a period to end the sentence. So that

00:16:35.790 --> 00:16:42.790
will be after mascara, and there we go.

00:16:45.839 --> 00:16:52.839
So let's run the program now. Give you a little
more console, so you can see. How many mascara

00:16:57.589 --> 00:17:04.589
do you wish to purchase? One. You ordered
one mascara. Looking good. The next thing

00:17:06.720 --> 00:17:13.569
we need to do are the calculations, so we
can add up the cost of the three items. Now

00:17:13.569 --> 00:17:20.569
at this point, we don't have three items in
there, so now it's time to—okay, I see I

00:17:20.760 --> 00:17:27.760
made a mistake here. Do you notice that I
put the input statements where it said calculate

00:17:28.069 --> 00:17:32.880
the price of a full purchase? That's something
we need to fix now. That should've been up

00:17:32.880 --> 00:17:38.909
above there. You'll notice these little things
when you're programming, easy to make lots

00:17:38.909 --> 00:17:45.909
of mistakes. While we're doing that and copying
and pasting that into the right position,

00:17:46.030 --> 00:17:53.030
let's do it two more times so that we can
get our data for other items. Now this was

00:17:55.500 --> 00:18:00.659
just debugging output that we put in. We don't
need that anymore. Would've been wise to remove

00:18:00.659 --> 00:18:06.650
that, by the way, before we had copied and
pasted it three times. Let's get that out

00:18:06.650 --> 00:18:13.650
of there, and go back and create our variables.

00:18:20.350 --> 00:18:27.350
So we'll have an int for number of lipstick.
We'll have a string for lipstick, and we'll

00:18:35.799 --> 00:18:42.799
have a double for the price of lipstick. And
I don't remember what lipstick happened to

00:18:44.900 --> 00:18:50.230
cost, so let's go back up and take a look.
Notice this is where it's really nice to have

00:18:50.230 --> 00:18:53.620
these comments at the top, so we can just
go back and look and not have to go back to

00:18:53.620 --> 00:18:59.309
the PowerPoint. So 3.99 is lipstick, and while
we're at it the eye shadow 6.99, so we should

00:18:59.309 --> 00:19:06.309
probably remember that. So the last thing
we need is the number of eye shadow. So we'll

00:19:21.780 --> 00:19:28.780
have a string for eye shadow, and a double
for the price of eye shadow. Notice that I've

00:19:39.470 --> 00:19:44.320
left a space between each group of variables.
I do that to make it a little bit easier to

00:19:44.320 --> 00:19:48.169
read the code. So you don't want to leave
too many spaces because then you don't see

00:19:48.169 --> 00:19:52.250
much code on the screen, but you also don't
want to just smash everything together because

00:19:52.250 --> 00:19:59.250
then it's hard to read. So now let's go down
here, so instead of mascara, we'll ask about

00:20:05.240 --> 00:20:12.240
lipstick next, and then we'll go down. Notice
I've got an extra line there. I'm going to

00:20:25.090 --> 00:20:32.090
remove that to keep the code looking neat,
and we'll look for eye shadow.

00:20:37.870 --> 00:20:44.870
Okay, so now we're ready to calculate the
price. Total price is going to be the number

00:20:52.299 --> 00:20:59.299
of mascara times the price of mascara plus--and
I think maybe I'll put that on another line

00:21:06.970 --> 00:21:11.159
because I think we're going to run out of
space. Notice that I'm indenting it far enough

00:21:11.159 --> 00:21:18.159
so that it's still to the right of the equal
sign. So we'll have the number of lipstick

00:21:19.840 --> 00:21:25.690
times the price of lipstick. Don't worry about
the fact that Eclipse is going nuts at this

00:21:25.690 --> 00:21:32.690
point with the red lines. And we'll have the
number of eye shadow times the price of eye

00:21:34.049 --> 00:21:41.049
shadow. So that's the total price. Now that
we've finished this line, we can see that

00:21:41.120 --> 00:21:48.120
Eclipse actually has a point. I did make a
typo there, and Eclipse is happy once again.

00:21:56.480 --> 00:22:03.480
Probably it's a good time to run this program.
So let's print out the total price now. Oh,

00:22:08.690 --> 00:22:14.880
I didn't want to do that. That was all that
nice input that we had just put out, so we

00:22:14.880 --> 00:22:21.880
don't want to get rid of that. Let's just
print out system out print line the total

00:22:23.919 --> 00:22:30.919
cost of your order was plus total price. Now
we see that Eclipse has a little red bar there,

00:22:39.620 --> 00:22:45.690
so we might go and see—ah, once again Eclipse
is right. I forgot something there. I forgot

00:22:45.690 --> 00:22:51.080
to put a semicolon in. Those things make a
big difference in programming. So Eclipse

00:22:51.080 --> 00:22:55.679
is happy. We can now see this because there
are no little red bars over here and no little

00:22:55.679 --> 00:23:01.169
red x's over here. Don't worry too much about
these yellow things. What it's telling us

00:23:01.169 --> 00:23:07.049
is that we haven't used these variables yet.
We actually knew that, so that isn't a problem.

00:23:07.049 --> 00:23:14.049
Let's run the program. How many mascara? One.
How many lipstick? One. How many eye shadow?

00:23:20.820 --> 00:23:25.740
One. You ordered one mascara. Now the reason
it's not showing all of them is that we didn't

00:23:25.740 --> 00:23:29.909
print those out. And the total cost of your
order was 19.87.

00:23:29.909 --> 00:23:36.549
Okay, so that looks about right. Let's go
back and fix our output. The other thing that

00:23:36.549 --> 00:23:43.549
I notice--it's a little odd that we have capital
letters in here. So let's go back and fix

00:23:43.940 --> 00:23:50.940
those too. So let's make the L in lipstick
small, the E in eye shadow small, mascara

00:23:53.360 --> 00:24:00.360
should be up a little bit. So let's make the
M in mascara small, and go down and echo our

00:24:01.059 --> 00:24:08.059
other inputs. So here's the number of mascara.
I'm pasting it twice. Whoops, I'm pasting

00:24:24.190 --> 00:24:31.190
it in the wrong spot too. We want those to
be before the output, not after it. It's a

00:24:37.100 --> 00:24:41.220
really good idea to cut and paste these lines
because that way the formatting is exactly

00:24:41.220 --> 00:24:48.220
the same. We're going to do number lipstick
and lipstick here, and number eye shadow 
and eye shadow there. And Eclipse is unhappy

00:25:10.750 --> 00:25:14.440
because I forgot the capital S in eye shadow.

00:25:14.440 --> 00:25:21.380
Okay, so why is Eclipse unhappy about number
of lipstick? Well, if you look up in the formula

00:25:21.380 --> 00:25:28.380
above, you'll see that the S in stick wasn't
capital. So there we go, and once again we

00:25:29.190 --> 00:25:36.190
have restored order to Eclipse. So let's run
our program. This time let's buy two mascara,

00:25:40.320 --> 00:25:47.320
two lipstick, and two eye shadow. Okay, so
things are looking good, and we're getting

00:25:49.399 --> 00:25:55.100
close to having this program finished. So
the next thing we need to do is to add the

00:25:55.100 --> 00:26:00.220
tax. An important thing to consider is what
to do about the partial cents because there's

00:26:00.220 --> 00:26:07.220
no guarantee that the tax will work out perfectly
to a penny. Once we've calculated the price,

00:26:09.029 --> 00:26:14.809
we know that we're going to have to calculate
the tax. Now the reason I'm creating a variable

00:26:14.809 --> 00:26:20.010
for this is because users usually want to
see how much tax they're paying, particularly

00:26:20.010 --> 00:26:24.029
on an e-commerce application since it can
be different depending on what state they

00:26:24.029 --> 00:26:31.029
live in. The tax is going to equal the total
price times the tax rate. Now let's think

00:26:35.630 --> 00:26:41.179
about that for a minute. First off, let's
make sure that our tax rate was done the correct

00:26:41.179 --> 00:26:48.179
way. So our tax rate is .065, which is in
fact to 6 and 1/2%, and so that should be

00:26:50.340 --> 00:26:56.360
multiplied by the total price. But at this
point both of these are doubles, and so we

00:26:56.360 --> 00:27:00.700
have to worry about what to do with possible
half cents.

00:27:00.700 --> 00:27:05.860
Now when you're doing things like this commercially
as a software engineer, you need to be careful

00:27:05.860 --> 00:27:11.990
because very often states will have specific
rules about just exactly how tax calculations

00:27:11.990 --> 00:27:17.820
are supposed to be done, so you really don't
want to break those rules. But, you know,

00:27:17.820 --> 00:27:21.850
it's just a Java course. We're going to be
okay. So let's just round up to the nearest

00:27:21.850 --> 00:27:28.850
penny. To do that, we'll do tax equals tax
plus .005. If you think about that for a minute,

00:27:33.070 --> 00:27:39.110
you'll think that is just adding half a penny
on. At this point we'll be able to truncate,

00:27:39.110 --> 00:27:46.110
so we will have our tax equal to tax times
100. That gets it up to pennies, and then

00:27:54.510 --> 00:28:00.340
we'll make it an int, and that truncates it
to an even penny. Now there are other ways

00:28:00.340 --> 00:28:05.090
that we can solve this problem, we just don't
know the Java yet. We'll get to them later.

00:28:05.090 --> 00:28:10.830
We certainly now want to tell the user about
the tax. So that should probably come between

00:28:10.830 --> 00:28:17.830
their order and the total cost. So system
out print line your tax was plus tax. The

00:28:23.330 --> 00:28:27.010
other thing we might want to think about is:
have we added the tax into the total order

00:28:27.010 --> 00:28:34.010
or not? If you look up here you'll see we
calculated the tax, but we didn't add it in.

00:28:34.100 --> 00:28:41.100
So let's add it in now. Total price equals
total price plus tax. Now let's run the program.

00:28:50.130 --> 00:28:57.130
One mascara, one lipstick, one eye shadow
our tax was $129. That seems like a lot of

00:28:59.620 --> 00:29:06.419
tax on a purchase that's 18 bucks, so let's
see what went wrong. Well, if you look in

00:29:06.419 --> 00:29:13.419
the program, you'll notice that we multiplied
by 100, but we forgot to divide by 100 too.

00:29:15.600 --> 00:29:21.870
So the reason we multiply by 100 was to put
the price in pennies. Then we could truncate

00:29:21.870 --> 00:29:26.559
those half cents so we knew we were handling
our tax correctly, but then we have to move

00:29:26.559 --> 00:29:33.559
it back into dollars, so it's a complicated
calculation. Let's run it again. One mascara,

00:29:40.740 --> 00:29:46.549
one lipstick, one eye shadow—ah, $1.29.
That looks like a little bit more reasonable

00:29:46.549 --> 00:29:52.640
tax rate.

00:29:52.640 --> 00:29:56.860
The last thing we need to do is to add in
the shipping cost. Once again that's something

00:29:56.860 --> 00:30:00.980
that users are going to want to see spelled
out on their final receipt, so we need to

00:30:00.980 --> 00:30:07.980
remember to include it there too. Now our
shipping was just a flat rate, so our total

00:30:10.080 --> 00:30:17.080
price equals total price plus shipping. One
thing I noticed looking at the code now is

00:30:21.450 --> 00:30:26.490
it would be a good idea to add in a few more
comments. I see that I've forgotten the name

00:30:26.490 --> 00:30:32.549
of our variable shipping too, so we may want
to look at that while we're going up. I probably

00:30:32.549 --> 00:30:39.549
called it something like shipping cost. Yes,
I did, and that's a better name. So let's

00:30:41.549 --> 00:30:48.549
add in some comments, like calculate the tax
rate, since that's what we were doing. Add

00:30:57.289 --> 00:31:04.289
the tax to the price. Add the shipping.

00:31:05.990 --> 00:31:12.990
Now commercial software engineers actually
are supposed to write as many lines of comments

00:31:14.230 --> 00:31:19.429
as they write of code. In fact, that's a professional
standard. We don't usually do that in little

00:31:19.429 --> 00:31:24.159
programs for class, but you can think of that
as being an ideal. So it's very unlikely that

00:31:24.159 --> 00:31:31.159
you're writing too many comments. Okay, so
here's our tax. Let's tell the user about

00:31:34.190 --> 00:31:41.190
the shipping. This time I'll remember that
we called it shipping cost, and there we go.

00:31:50.340 --> 00:31:57.340
So let's run the program one last time. One
mascara, one lipstick, one eye shadow, tax

00:32:05.230 --> 00:32:12.230
was $1.29, shipping was 8, and the total cost
was 29.16. Now you'll notice that our shipping

00:32:12.419 --> 00:32:19.110
is shown as 8.0 instead of 8.00. That's a
problem that we have with print line. We'll

00:32:19.110 --> 00:32:23.230
know how to fix that later, but for right
now we don't. It's technically correct; it's

00:32:23.230 --> 00:32:29.409
just not very pretty. So our program is almost
finished now. So we've tested the code, but

00:32:29.409 --> 00:32:34.649
we only tested it once, and running a program
once is really not enough. So the first thing

00:32:34.649 --> 00:32:39.159
we should do is try testing it by buying zero
of each object. This is something called a

00:32:39.159 --> 00:32:44.529
boundary condition. Things tend to go wrong
in computer science at the edges, and so we

00:32:44.529 --> 00:32:48.909
test the boundaries very carefully. Now before
we run the program, we might want to think

00:32:48.909 --> 00:32:54.289
about what we're expecting to see from this.
You have to be a little careful here. In our

00:32:54.289 --> 00:32:58.279
program right now what we're going to see
is that if we buy zero of everything, we get

00:32:58.279 --> 00:33:02.299
eight dollars of shipping. That's kind of
unfortunate, but it just has to do with the

00:33:02.299 --> 00:33:07.389
fact that we don't know how to avoid that
yet. Still, let's see it in the code. So we're

00:33:07.389 --> 00:33:14.389
going to run again: zero mascara, zero lipstick,
zero eye shadow, and we end up paying eight

00:33:17.529 --> 00:33:21.960
bucks. That's probably not going to make customers
very happy, but then again we're not quite

00:33:21.960 --> 00:33:28.960
ready to write commercial software just yet.
We tried the case where we bought one of each

00:33:30.450 --> 00:33:35.970
object, but let's try just buying one of each
object one at a time. That's a good boundary

00:33:35.970 --> 00:33:42.970
case too. So let's buy one mascara, no lipstick,
no eye shadow. 17.57. That mascara got expensive.

00:33:49.880 --> 00:33:56.880
That's what eight bucks of shipping will do
for you. Now let's buy no mascara, one lipstick,

00:33:59.080 --> 00:34:06.080
no eye shadow. 12.25. Remember lipstick was
a lot less expensive. And now no mascara,

00:34:09.090 --> 00:34:16.090
no lipstick, one eye shadow. 15.34. So things
are looking good. Now you would certainly

00:34:18.450 --> 00:34:22.540
want to take your calculator and make sure
that those numbers are correct, but I checked

00:34:22.540 --> 00:34:25.290
them. They're fine.

00:34:25.290 --> 00:34:29.250
Maybe we could buy one, two, and three of
the objects too because we really haven't

00:34:29.250 --> 00:34:36.250
tested whether numbers greater than one are
working correctly. So one mascara, two lipstick,

00:34:38.630 --> 00:34:45.630
three eye shadow. 48 bucks--pretty hefty purchase,
but then again it's a lot of makeup. Now here's

00:34:48.540 --> 00:34:55.030
an interesting question. How can we test whether
the tax is rounding properly? Because our

00:34:55.030 --> 00:34:59.470
numbers have been odd here, it's a little
hard to tell, but we did something really

00:34:59.470 --> 00:35:03.860
smart. We made our numbers variables, so let's
change one of them to an even number where

00:35:03.860 --> 00:35:10.860
we can really easily tell if the tax is being
worked with correctly, like for example $10.

00:35:12.710 --> 00:35:19.710
So we'll go back to our code and let's change
the price of mascara, way back up at the top

00:35:28.950 --> 00:35:35.950
to $10. Now at this point we know exactly
how many cents we should get. We should have

00:35:38.100 --> 00:35:45.100
65 cents of tax added in. So let's run our
program. Just buy one mascara, no lipstick,

00:35:49.980 --> 00:35:56.520
no eye shadow, and we get 18.65. So that was
10 dollars for the mascara, 65 cents for the

00:35:56.520 --> 00:36:03.520
tax, and 8 dollars for the shipping. So that
works too. Oh yes, before we go back, one

00:36:06.660 --> 00:36:10.560
of the things you want to make sure you do
when you do that kind of testing is that you

00:36:10.560 --> 00:36:15.540
restore your program to its original state.
That's easy to forget, and that actually leaves

00:36:15.540 --> 00:36:21.350
you with an incorrect program.

00:36:21.350 --> 00:36:26.650
Here's my advice on implementing programs
in general. First off, get started early.

00:36:26.650 --> 00:36:30.510
A lot of people get into programming trouble
because they start the night before something

00:36:30.510 --> 00:36:34.690
is due, and then if something goes wrong,
they can't get help. There are a lot of things

00:36:34.690 --> 00:36:40.250
that can go wrong in programming, and it helps
if you have the time to get some support.

00:36:40.250 --> 00:36:43.780
Notice that I write just a little bit of code
at a time. I don't write hundreds of lines

00:36:43.780 --> 00:36:50.290
and then try to fix it. I also keep the code
neat and organized at all times. Indentation

00:36:50.290 --> 00:36:56.640
is especially important, particularly as we
go on. And I use meaningful variable names.

00:36:56.640 --> 00:37:02.390
That way I know what things mean in the program.
And I test as soon as possible, and I test

00:37:02.390 --> 00:37:07.040
as often as possible. Do those things. You
should have a lot of success programming too.

