WEBVTT
Kind: captions
Language: en

00:00:01.170 --> 00:00:07.070
&gt;&gt;Let's talk a little about nested conditional
statements. Conditional statements are really

00:00:07.070 --> 00:00:13.410
best in handling things that occur sometimes.
So they allow different courses of action

00:00:13.410 --> 00:00:18.650
to be followed in different circumstances.
This is absolutely necessary to programming

00:00:18.650 --> 00:00:24.750
well. Now you can put one conditional statement
inside another. This is called 'nesting,'

00:00:24.750 --> 00:00:29.560
and it's possible to nest to any depth. I
will say though that more than three layers

00:00:29.560 --> 00:00:34.489
tends to be really hard to understand. So
when you start nesting things more than three

00:00:34.489 --> 00:00:38.809
layers deep, that's when you need to think
about whether maybe there's a better structure

00:00:38.809 --> 00:00:44.199
that could be used. The example we're going
to look at here is one where deeper nesting

00:00:44.199 --> 00:00:50.679
is actually permitted. And I'll explain why
it's okay in this case and not in other cases.

00:00:50.679 --> 00:00:55.179
We'll learn some simplification tricks for
some nested statements later-- particularly

00:00:55.179 --> 00:01:01.889
using logical operators, but that's for the
next quarter of the course. Now the problem

00:01:01.889 --> 00:01:07.430
I'm going to work on is a very urgent problem
in my house called 'feed the dog.' We're going

00:01:07.430 --> 00:01:12.299
to write a program that allows the user to
enter a dogs weight and prints out the amount

00:01:12.299 --> 00:01:18.560
of dog food to feed. So 5 pounds would be
one half to three fifths of a cup. By the

00:01:18.560 --> 00:01:23.369
way I actually got these numbers off the side
of the dog food bag. Who measures three fifths

00:01:23.369 --> 00:01:29.409
of a cup? 10 pounds is three quarters to one
cup, 20 pounds in one and a third to one and

00:01:29.409 --> 00:01:31.920
a half, and so on.

00:01:31.920 --> 00:01:37.810
Now, the first thing you've got to think about
is an interpretation issue. What are we going

00:01:37.810 --> 00:01:43.509
do when we have dogs between two weights,
particularly with the smaller weight sizes.

00:01:43.509 --> 00:01:47.249
And by the way the real thing on the side
of the bag actually went up all the way to

00:01:47.249 --> 00:01:53.780
a hundred pounds. I just picked out the small
ones. So what are we going to do? I mean,

00:01:53.780 --> 00:01:59.689
a 5-pound dog and a 10-pound dog, that's a
huge difference. It's a factor of two in weight.

00:01:59.689 --> 00:02:06.270
So we really have to think this through carefully.
So should we pick the lower figure? If the

00:02:06.270 --> 00:02:12.370
dog weighs 7.5 pounds do we want to feed it
the same as a 5-pound dog? Well what about

00:02:12.370 --> 00:02:19.370
the higher one? Maybe a 7.5-pound dog should
be fed the same as a 10-pound dog. We could

00:02:19.599 --> 00:02:25.260
pick the closest one. Now that actually might
make some sense. So for example, a 6-pound

00:02:25.260 --> 00:02:31.269
dog we would pick a 5-pound weight and a 9-pound
dog we would pick a 10-pound weight. But then

00:02:31.269 --> 00:02:35.909
there's that awkward place at 7.5-pounds where
you awkwardly switch from the 5-pounds to

00:02:35.909 --> 00:02:42.909
the 10-pounds. Well maybe we should do something
like an average. Or maybe we should interpolate?

00:02:42.959 --> 00:02:48.540
Now interpolation is a fancy term but all
it means is draw a line and pick a place along

00:02:48.540 --> 00:02:52.590
that line. It's a little beyond what we want
to do in this class mathematically, but it

00:02:52.590 --> 00:02:58.049
is a possibility. Maybe we should list from
the high end of the low range from the low

00:02:58.049 --> 00:03:03.599
end of the high range. Well I guess that could
work but what if they don't intersect? And

00:03:03.599 --> 00:03:07.689
we could go from the low end of the low range
to the high end of the high range, but then

00:03:07.689 --> 00:03:12.760
you're really not helping people much because
you're getting this huge, huge, huge range.

00:03:12.760 --> 00:03:17.310
Now I know you probably think that I'm completely
insane to look at all these different possibilities,

00:03:17.310 --> 00:03:22.540
but you have to realize that the way this
problem was specified was not clean enough

00:03:22.540 --> 00:03:28.400
for you to be able to do it properly without
some more elaboration. One of the mistakes

00:03:28.400 --> 00:03:33.299
that professional computer scientists make
when they're programming is they forget to

00:03:33.299 --> 00:03:39.230
ask people who actually know things how to
do them. So instead they make conclusions

00:03:39.230 --> 00:03:44.099
and they think they know better than the people
who are actually experts in the field, and

00:03:44.099 --> 00:03:50.269
they just take a guess. Well that's just not
acceptable. In this case for example - some

00:03:50.269 --> 00:03:54.579
poor little dog could be going hungry, or
maybe just as bad, some poor little dog could

00:03:54.579 --> 00:03:57.909
be getting fat. So we don't want to do things
wrong.

00:03:57.909 --> 00:04:02.750
Now, as it happens the way I actually cleared
up this confusion was to go back and to read

00:04:02.750 --> 00:04:08.170
the dog food bag a little more carefully and
what it said is that if the weight is in between

00:04:08.170 --> 00:04:14.680
you should go with the higher weight. So that's
the interpretation my dogs would've liked,

00:04:14.680 --> 00:04:19.340
and that's the one we're going to use in this
problem. Now, it's very important to think

00:04:19.340 --> 00:04:24.210
about your strategy when you start to implement
these things. You definitely need to stay

00:04:24.210 --> 00:04:30.290
organized. Don't just start slapping things
together. Now in this case it means you probably

00:04:30.290 --> 00:04:35.350
want to organize this computation from the
lowest to the highest, or from the highest

00:04:35.350 --> 00:04:41.530
to the lowest. It can actually be done successfully
either way. Let's go and actually implement

00:04:41.530 --> 00:04:48.530
this code. So I've opened up Eclipse here,
and I've pre-created a project for us to use.

00:04:57.990 --> 00:05:03.270
So here it is. I've even cut and pasted the
code in there. Now that was the description

00:05:03.270 --> 00:05:07.290
from the PowerPoint. It's always useful to
have that around, and remember you can put

00:05:07.290 --> 00:05:12.040
it in the comments. Let's go from smallest
tot largest because that's the way the PowerPoint

00:05:12.040 --> 00:05:19.040
was written. Now, we're going to have to make
a comparison here between the weight and five.

00:05:20.100 --> 00:05:27.100
In order to do that, we need to declare a
weight as a double. So if the weight is less

00:05:29.450 --> 00:05:36.450
than five we should do system out print line,
feed one half to three fifths cups. Okay now

00:05:45.930 --> 00:05:50.660
Eclipse isn't happy here, and the reason it
isn't happy is that we haven't given weight

00:05:50.660 --> 00:05:56.930
a value. Now we could get input from the user
for example and that's how we would want this

00:05:56.930 --> 00:06:03.930
program to work - but for right now I'm just
going to put in a numeric value and we'll

00:06:04.460 --> 00:06:10.330
experiment a little with that when we go to
making sure the program is working correctly.

00:06:10.330 --> 00:06:15.030
So the next thing we need to do is to put
in an out statement, because this will only

00:06:15.030 --> 00:06:19.620
handle weights that are less than five. Before
we do that though let's take a look at that

00:06:19.620 --> 00:06:26.620
conditional statement again. Now, what happens
when weight is exactly equal to five? Should

00:06:26.750 --> 00:06:31.660
we have been in this category or not? Well,
the one place we're sure we should've been

00:06:31.660 --> 00:06:38.470
in this category is right there. So we definitely
want to have a less than or equal. This is

00:06:38.470 --> 00:06:44.110
a form of an off by one bug, with being just
a little bit off tends to cause a lot of chaos

00:06:44.110 --> 00:06:49.400
in programming. So computer scientists like
me tend to be really crazy about making sure

00:06:49.400 --> 00:06:54.930
that we don't get off by these little tiny
fractions because they do have a problem.

00:06:54.930 --> 00:07:01.930
So, our next case will be else weight, sorry,
else if weight is less than or equal to ten.

00:07:09.390 --> 00:07:16.190
Now you'll see that we really should be indenting
another position here. And the reason we should

00:07:16.190 --> 00:07:22.160
be indenting that position is because we have
an 'else' and we have an 'if' nested inside

00:07:22.160 --> 00:07:28.530
of it. As it turns out in Java though we don't
usually indent it this way. As long as the

00:07:28.530 --> 00:07:35.530
structure is a simple 'if, else if, else if'
structure which this one is. It's actually

00:07:35.850 --> 00:07:40.600
a little nicer because it keeps the code on
the screen and because the structure is so

00:07:40.600 --> 00:07:45.260
logically simple, it doesn't get confusing.

00:07:45.260 --> 00:07:52.260
So we'll do a system out print line, feed
three-quarters to one cup. Else if weight

00:08:01.720 --> 00:08:08.720
is less than or equal to twenty than we'll
do system out print line, feed one and one

00:08:11.940 --> 00:08:18.940
third to one and a half cups. I see I've got
an extra space between my less than and equal.

00:08:29.370 --> 00:08:36.370
Now in this case, this forty-pound case is
our last case. So we'll just put an else there

00:08:37.349 --> 00:08:44.349
and no if. And then let's see, two and a quarter
to two and a half cups. Now in order to make

00:08:58.079 --> 00:09:03.480
sure this is working correctly, one thing
we need to do is to test all the cases. This

00:09:03.480 --> 00:09:08.889
is incredibly critical when you have nested
statements to make sure you try every single

00:09:08.889 --> 00:09:14.810
one. So even though the structure is pretty
simple, we need to make sure they're all working.

00:09:14.810 --> 00:09:21.810
So for example, instead of starting at 5.2
let's start at 4.7. Now when we test this

00:09:22.810 --> 00:09:29.810
we should see feed one and a half to three
fifths cups, which we did. Now I'm going to

00:09:33.949 --> 00:09:40.949
go and test one right after the next. So maybe
6.2-- this should be feed three-quarters to

00:09:40.949 --> 00:09:47.949
one cup. This type of cautiousness, of looking
through every possible case, really pays off

00:09:53.620 --> 00:09:59.620
big in programming. Much easier to find mistakes
when there's just a few lines of code. So

00:09:59.620 --> 00:10:05.100
we could go through and step through every
single one, one at a time. Now one thing you

00:10:05.100 --> 00:10:10.319
may have noticed when I was creating these
is that I put curly braces around every single

00:10:10.319 --> 00:10:16.029
one of my 'if elses.' Now, this is a preferable
preference and not everybody in computer science

00:10:16.029 --> 00:10:23.029
agrees with this, but let me show you what
happens if you decide not to do that. So I'm

00:10:23.389 --> 00:10:30.389
going to take these away and actually, because
there's only one statement in each one, it

00:10:31.220 --> 00:10:38.220
wasn't necessary to have the curly braces
there. So this perfectly legal code. And by

00:10:43.930 --> 00:10:50.120
the way the people who prefer to code this
way, their usual argument is that it's shorter.

00:10:50.120 --> 00:10:57.120
But let me show you what tends to happen.

00:11:03.949 --> 00:11:10.949
So it looks, particularly if you don't look
to carefully, like what I'm doing here it

00:11:12.810 --> 00:11:16.480
having to print out that's a lot of food just
in the case when it's two and a quarter and

00:11:16.480 --> 00:11:21.670
two and a half cups, because of the way I
have it indented. Well let's put it in a little

00:11:21.670 --> 00:11:28.670
teeny tiny dog weight like 2.3 pounds and
see what happens. Well, notice it printed

00:11:33.709 --> 00:11:39.480
out 'that's a lot of food.' The problem here
is that Java doesn't read indentation. It

00:11:39.480 --> 00:11:44.550
reads curly braces, and if there aren't any
curly braces it puts just one statement in

00:11:44.550 --> 00:11:51.199
the body part. This mistake is incredibly
hard to find. Now I realize we have just a

00:11:51.199 --> 00:11:55.620
few lines of code on the screen and probably
you saw it coming from a mile away, but when

00:11:55.620 --> 00:12:00.499
you make this mistake in a program it can
really be tough to deal with. After having

00:12:00.499 --> 00:12:06.300
a really bad day one day looking for this
mistake, I decided that every time I write

00:12:06.300 --> 00:12:11.319
code I'm just going to put in curly braces.
And if people don't like it, that's there

00:12:11.319 --> 00:12:16.120
problem because my code will be correct and
I will know my code is correct and I won't

00:12:16.120 --> 00:12:20.740
have to spend time debugging this mistake.
Now this is part of something that is really

00:12:20.740 --> 00:12:26.319
important in computer science, and in fact
for almost any professional, it's what's called

00:12:26.319 --> 00:12:31.559
being a reflective practitioner. That is any
time you make a mistake or have a problem

00:12:31.559 --> 00:12:37.999
in your program, it really pays to stop and
think, "What did I do or what could I do in

00:12:37.999 --> 00:12:44.059
the future to prevent this mistake from happening
again?" If you do this over the course of

00:12:44.059 --> 00:12:48.639
a lifetime you will become better and better
at your job as you move along, so I highly

00:12:48.639 --> 00:12:49.990
recommend it.

00:12:49.990 --> 00:12:54.949
Now I will say it also applies when you have
a big success, but most people spend plenty

00:12:54.949 --> 00:12:59.420
of time contemplating their successes and
they don't always think through their failures

00:12:59.420 --> 00:13:03.879
so closely. And I have to say I'm afraid I've
learned a lot more from my failures than I've

00:13:03.879 --> 00:13:10.519
learned from my successes. So let's run our
program again and see if we fixed it. And

00:13:10.519 --> 00:13:16.920
of course we have as you've probably suspected
by now. Here's the scoop on indentations and

00:13:16.920 --> 00:13:22.559
curly braces: Lining up on if and else at
the left hand side is okay if the structure

00:13:22.559 --> 00:13:29.559
is simple. What I mean by simple is in this
case for example we had an if, else if, else

00:13:29.569 --> 00:13:35.759
if, else if. No other structure in there.
That's the case where you're allowed to not

00:13:35.759 --> 00:13:40.899
indent on the left hand side. And also remember
that the curly braces are optional when you

00:13:40.899 --> 00:13:46.170
have single statement, but I highly recommend
them. So keep programming.

